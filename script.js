let trollLevel = 0;
let progress = 0;
let degoulinantText = null;
let calculatorInitialized = false;
let morpionCells = [];
let popupCount = 0;
let activatedAlerts = new Set();
let matrixRainInterval = null;
let popupInterval = null; // Pour g√©rer l'intervalle de r√©apparition des popups

// Pour suivre les effets de troll qui ont d√©j√† d√©clench√© leur "rafale initiale"
let initialTrollEffectsTriggered = new Set();

// Variables pour le syst√®me de red√©marrage
let errorCounter = 0;
const RESTART_ERROR_THRESHOLD = 5; // Le nombre d'erreurs avant de d√©clencher le red√©marrage
let restartSequenceActive = false; // Drapeau pour indiquer si une s√©quence de red√©marrage est en cours
let spinnerSpeedInterval = null; // Pour contr√¥ler l'intervalle de vitesse du spinner
let currentProgressTimeout = null; // Pour stocker le timeout de updateProgress afin de pouvoir l'arr√™ter

// NOUVEAU: Contr√¥le si le popupInterval peut √™tre d√©marr√© ou reprendre.
let canGenerateIntervalPopups = true;


const fullscreenContainer = document.getElementById("fullscreen-container");
const mainTitle = document.getElementById("main-title");
const progressBarElement = document.getElementById("progress-bar");
const progressBar = document.getElementById("progress");
const status = document.getElementById("status");
const searchBarWrapper = document.getElementById("search-bar-wrapper");
const searchBar = document.getElementById("search-bar");
const submitSearchBtn = document.getElementById("submit-search-btn");
const morpionContainer = document.getElementById("morpion-container");
const popupContainer = document.getElementById("popup-container");
const errorSound = document.getElementById("error-sound");
const imageTroll = document.getElementById("image-troll");
const rickrollVideo = document.getElementById("rickroll-video");
const subwaySurferVideo = document.getElementById("subway-surfer-video");
const matrixRainContainer = document.getElementById("matrix-rain-container");
const calculatorContainer = document.getElementById("calculator-container");
const customAlertContainer = document.getElementById("custom-alert-container");
const calcDisplay = document.getElementById("calc-display");
const calcButtons = document.getElementById("calc-buttons");

// √âl√©ments pour le spinner de red√©marrage
const windowsRestartSpinnerElement = document.getElementById("windows-restart-spinner");
const spinningCircleElement = windowsRestartSpinnerElement ? windowsRestartSpinnerElement.querySelector(".spinning-circle") : null;


// Tableau de messages troll pour les popups
const trollMessages = [
    "Erreur critique 0x000000FF. Votre syst√®me est immunis√© contre les erreurs (temporairement).",
    "Syst√®me 32 prot√©g√©. (Pour l'instant... üòè)",
    "Antivirus d√©sactiv√© pendant 10 minutes pour cause de 'mise √† jour essentielle'.",
    "Suppression de Windows bloqu√©e. Dommage hein ?",
    "Tentative d'acc√®s √† vos donn√©es personnelles... √âchec. Re-tentative dans 5 secondes.",
    "Votre souris est maintenant contr√¥l√©e par une intelligence sup√©rieure. Enjoy !",
    "La l&%%ai@de-sE\"@cOprM, =\\¬°s¬ø¬ø Votre PC a bugg√© en essayant de comprendre ce message.", // Message corrompu
    "Je te troll ü§£ü§£ü§£ ou pas üòêüòê du tout et c'est un virus üò®.",
    "Un fichier crucial a √©t√© remplac√© par un GIF de chatons. Pas de panique !",
    "Attention : Votre caf√© est probablement froid maintenant.",
    "D√©tection d'une activit√© anormale... C'est juste vous, ne vous inqui√©tez pas (ou si).",
    "Votre clavier est maintenant en mode QWERTY al√©atoire. Bonne chance !",
    "Scan de votre historique de navigation en cours. Juste pour rire !",
    "Chargement du 'Dossier Secret' impossible. Contenu trop g√™nant.",
    "F√©licitations ! Vous avez trouv√© l'erreur 404... dans votre vie."
];


// --- LOGIQUE POUR LE PLEIN √âCRAN ET LES TOUCHES DE SORTIE ---
let isTrollActive = false;
let hasEnteredFullscreenOnce = false;

function requestFullscreenMode() {
    console.log("Tentative de demande de plein √©cran.");
    if (fullscreenContainer.requestFullscreen) {
        fullscreenContainer.requestFullscreen().then(() => {
            hasEnteredFullscreenOnce = true;
            console.log("Plein √©cran activ√©.");
            if (trollLevel >= 14) {
                disableCursorJitter();
                console.log("Jitter (Niveau 14) d√©sactiv√© en mode plein √©cran.");
            }
        }).catch(err => {
            console.warn("√âchec de la demande de plein √©cran:", err);
            if (!isTrollActive) {
                console.log("D√©marrage du m√©canisme de troll car plein √©cran √©chou√©.");
                startTrollMechanism();
            }
        });
    } else {
        console.warn("API Fullscreen non support√©e par le navigateur. D√©marrage direct du troll.");
        if (!isTrollActive) {
            startTrollMechanism();
        }
    }
}

function exitFullscreenMode() {
    console.log("Tentative de sortie du plein √©cran.");
    if (document.exitFullscreen) {
        document.exitFullscreen().catch(err => {
            console.warn("√âchec de la sortie du plein √©cran:", err);
        });
    }
}

function handleFullscreenChange() {
    console.log("√âv√©nement fullscreenchange d√©tect√©. FullscreenElement:", document.fullscreenElement);
    if (!document.fullscreenElement && isTrollActive) {
        console.log("Sortie du plein √©cran d√©tect√©e. Le retour sera forc√© au prochain clic.");
        if (trollLevel >= 14 && !jitterInterval) {
            enableCursorJitter();
            console.log("Jitter (Niveau 14) r√©activ√© apr√®s sortie du plein √©cran.");
        }
    }
}

function handleGlobalKeyDown(event) {
    if (event.key === "Escape" && isTrollActive) {
        console.log("Touche Escape press√©e, troll actif.");
        event.preventDefault();

        if (!document.fullscreenElement && hasEnteredFullscreenOnce) {
             console.log("Hors plein √©cran, tentative de retour en plein √©cran au prochain clic.");
        }
    }
}

function handleBeforeUnload(event) {
    if (isTrollActive) {
        console.log("Tentative de quitter la page, troll actif.");
        event.returnValue = "Vous √™tes s√ªr de vouloir quitter ? La mise √† jour est en cours et cela pourrait endommager votre syst√®me.";
        return event.returnValue;
    }
}

function showCustomAlert(message) {
    customAlertContainer.innerHTML = `
        <p>${message}</p>
        <button id="custom-alert-ok-btn">OK</button>
    `;
    customAlertContainer.style.display = 'block';
    console.log(`Alert personnalis√©e affich√©e: "${message}"`);
    customAlertContainer.querySelector('#custom-alert-ok-btn').onclick = () => {
        customAlertContainer.style.display = 'none';
        console.log("Alert personnalis√©e ferm√©e.");
    };
}


// --- INITIALISATION DU TROLL AVEC INTERACTION ---
function initializeTrollStartInteraction() {
  mainTitle.style.display = 'none';
  progressBarElement.style.display = 'none';
  searchBarWrapper.style.display = 'none';
  searchBar.disabled = true;

  document.querySelectorAll('.fixed-element').forEach(el => el.style.display = 'none');
  document.querySelectorAll('.close-button').forEach(button => button.style.display = 'none');


  status.textContent = "Cliquez n'importe o√π pour d√©marrer la mise √† jour.";
  status.style.cursor = 'pointer';

  document.addEventListener('click', handleInitialClick, { once: true });
  document.addEventListener('click', handleReEnterFullscreen);
  console.log("Application initialis√©e, en attente du clic initial.");
}

function handleInitialClick() {
    console.log("Clic initial d√©tect√©, d√©marre le processus.");
    status.style.cursor = 'default';
    mainTitle.style.display = 'block';
    progressBarElement.style.display = 'block';
    searchBarWrapper.style.display = 'flex';
    submitSearchBtn.style.display = 'inline-block';

    document.querySelectorAll('.close-button').forEach(button => button.style.display = 'block');


    requestFullscreenMode();
    startTrollMechanism();
}

function handleReEnterFullscreen() {
    if (customAlertContainer.style.display === 'block') {
        return;
    }

    if (isTrollActive && !document.fullscreenElement) {
        console.log("Clic d√©tect√© hors plein √©cran alors que le troll est actif. Tentative de r√©-entrer.");
        requestFullscreenMode();
    }
}

function startTrollMechanism() {
    if (isTrollActive) return;
    isTrollActive = true;
    console.log("M√©canisme de troll d√©marr√©. isTrollActive:", isTrollActive);

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    window.addEventListener('keydown', handleGlobalKeyDown);
    window.addEventListener('beforeunload', handleBeforeUnload);

    searchBar.disabled = false;

    updateProgress();
}


// --- Fonctions de progression et d'activation des niveaux de troll ---

function updateProgress() {
    if (restartSequenceActive) return; // Ne pas mettre √† jour la barre si un red√©marrage est en cours

    if (progress < 100) {
        progress += Math.random() * 5;
        if (progress > 100) progress = 100;
        progressBar.style.width = progress + "%";
        status.textContent = `Mise √† jour en cours... ${Math.floor(progress)}%`;
        currentProgressTimeout = setTimeout(updateProgress, 300); // Stocker le timeout
    } else {
        status.textContent = "Mise √† jour termin√©e. D√©marrage des services.";
        console.log("Progression √† 100%. D√©marrage du niveau 1.");
        if (trollLevel === 0) { // Si aucun niveau n'est actif, passer au niveau 1
            activateTrollEffects(1);
        }
        currentProgressTimeout = null; // La progression est termin√©e
    }
}


function activateTrollEffects(newLevel) {
    if (restartSequenceActive) {
        console.log("Ignorer l'activation de troll pendant la s√©quence de red√©marrage.");
        return;
    }
  const parsedNewLevel = parseInt(newLevel);
  console.log(`Appel √† activateTrollEffects avec newLevel: ${newLevel}, parsedNewLevel: ${parsedNewLevel}`);
  if (isNaN(parsedNewLevel) || parsedNewLevel < 0 || parsedNewLevel > 15) {
    console.warn("Tentative d'activer un niveau de troll invalide :", newLevel);
    return;
  }

  if (parsedNewLevel === trollLevel) {
    console.log(`Niveau ${parsedNewLevel} d√©j√† actif, pas de changement.`);
    return;
  }
  console.log(`Changement de niveau de troll : de ${trollLevel} √† ${parsedNewLevel}.`);

  if (trollLevel >= 14) {
      disableCursorJitter();
      console.log("Jitter (Niveau 14) temporairement d√©sactiv√© pour changement de niveau.");
  }


  if (parsedNewLevel < trollLevel || parsedNewLevel === 0) {
    console.log("Reset complet demand√©.");
    resetAll();
    activatedAlerts.clear();
    trollLevel = 0;
  }

  for (let i = trollLevel + 1; i <= parsedNewLevel; i++) {
    activateTrollEffectForLevel(i);
  }

  trollLevel = parsedNewLevel;

  if (trollLevel >= 1) {
      searchBar.disabled = false;
      submitSearchBtn.style.display = 'inline-block';
      if (trollLevel === 1 && !restartSequenceActive) { // Ne pas √©craser le message de red√©marrage si actif
          status.textContent = "Mise √† jour termin√©e. Le syst√®me est en attente d'instructions.";
      }
  } else {
      searchBar.disabled = true;
      submitSearchBtn.style.display = 'none';
  }

  if (trollLevel >= 14 && !document.fullscreenElement) {
      enableCursorJitter();
      console.log("Jitter (Niveau 14) r√©activ√© apr√®s changement de niveau (hors plein √©cran).");
  }
}

function activateTrollEffectForLevel(level) {
    console.log(`Activation de l'effet pour le niveau ${level}.`);
    switch (level) {
        case 1:
            break;
        case 2:
            status.textContent = "Mise √† jour termin√©e - votre PC est infect√© üòà";
            break;
        case 3:
            document.body.classList.add("cursor-pale");
            console.log("Niveau 3: Curseur p√¢le activ√©.");
            break;
        case 4:
            showDegoulinantText();
            startMatrixRain();
            console.log("Niveau 4: Texte d√©goulinant et Matrix Rain activ√©s.");
            break;
        case 5:
            playErrorSound(1);
            console.log("Niveau 5: Son d'erreur activ√©.");
            break;
        case 6:
            playErrorSound(5);
            console.log("Niveau 6: Sons d'erreur r√©p√©t√©s activ√©s.");
            break;
        case 7:
            popupContainer.style.display = 'block';
            // Ne d√©clencher la rafale initiale de 5 popups que si le niveau 7 n'a pas √©t√© initialis√© depuis le dernier reset.
            if (!initialTrollEffectsTriggered.has(7)) {
                showFakePopups(5); // Cette rafale initiale va tr√®s probablement d√©clencher un red√©marrage
                initialTrollEffectsTriggered.add(7); // Marquer comme "initialis√©" pour ne pas le refaire
            }

            // Seulement d√©marrer popupInterval si autoris√© par canGenerateIntervalPopups
            if (!popupInterval && canGenerateIntervalPopups) {
                popupInterval = setInterval(() => showFakePopups(Math.floor(Math.random() * 3) + 1), 5000);
                console.log("Popup interval started/restarted.");
            } else if (popupInterval && !canGenerateIntervalPopups) {
                // Si l'intervalle tourne mais ne devrait pas (ce cas est g√©n√©ralement g√©r√© par triggerRestartSequence)
                clearInterval(popupInterval);
                popupInterval = null;
                console.log("Popup interval stopped because canGenerateIntervalPopups is false.");
            }
            console.log("Niveau 7: Popups activ√©es avec r√©apparition.");
            break;
        case 8:
            morpionContainer.style.display = 'block';
            initMorpion();
            console.log("Niveau 8: Morpion activ√©.");
            break;
        case 9:
            console.log("Niveau 9: Comportement de la barre de recherche modifi√©.");
            break;
        case 10:
            rickrollVideo.style.display = 'block';
            rickrollVideo.play();
            console.log("Niveau 10: Rickroll activ√©.");
            break;
        case 11:
            imageTroll.style.display = 'block';
            subwaySurferVideo.style.display = 'block';
            subwaySurferVideo.play();
            console.log("Niveau 11: Image Troll et Subway Surfer activ√©s.");
            break;
        case 12:
            if (!activatedAlerts.has(12)) {
                showCustomAlert("Activation de troll.vbs - (faux script externe, ne fait rien en vrai)");
                activatedAlerts.add(12);
                console.log("Niveau 12: Alerte .vbs d√©clench√©e.");
            }
            break;
        case 13:
            if (!activatedAlerts.has(13)) {
                showCustomAlert("Installation de script au d√©marrage Windows (faux install.bat, juste pour le troll)");
                activatedAlerts.add(13);
                console.log("Niveau 13: Alerte .bat d√©clench√©e.");
            }
            break;
        case 14:
            enableCursorJitter();
            console.log("Niveau 14: Jitter de fen√™tre activ√©.");
            break;
        case 15:
            calculatorContainer.style.display = 'block';
            initCalculator();
            console.log("Niveau 15: Calculatrice activ√©e.");
            break;
    }
}

function startTrollLevel(n) {
  activateTrollEffects(n);
}


function resetAll() {
  console.log("Ex√©cution de resetAll().");
  document.body.classList.remove("cursor-pale");

  // Masque tous les √©l√©ments 'fixed-element'
  document.querySelectorAll('.fixed-element').forEach(el => el.style.display = 'none');
  document.querySelectorAll('.close-button').forEach(button => button.style.display = 'none');


  let boardElement = document.getElementById("board");
  if (boardElement) boardElement.innerHTML = '';
  morpionCells = [];

  popupContainer.innerHTML = "";
  popupCount = 0;
  if (popupInterval) {
      clearInterval(popupInterval);
      popupInterval = null;
      console.log("Intervalle des popups arr√™t√©.");
  }
  popupContainer.style.display = 'none'; // S'assurer que le conteneur de popups est cach√©

  subwaySurferVideo.pause();
  subwaySurferVideo.currentTime = 0;

  rickrollVideo.pause();
  rickrollVideo.currentTime = 0;

  if (degoulinantText) {
    degoulinantText.remove();
    degoulinantText = null;
  }
  stopMatrixRain();
  matrixRainContainer.innerHTML = '';

  disableCursorJitter();

  // Cacher le spinner de red√©marrage et arr√™ter sa boucle
  if (windowsRestartSpinnerElement) windowsRestartSpinnerElement.style.display = 'none';
  stopRestartSpinnerSpeedLoop();

  mainTitle.style.display = 'block';
  progressBarElement.style.display = 'block';
  progressBar.style.width = '0%';
  progress = 0;

  searchBarWrapper.style.display = 'flex';
  searchBar.disabled = true;
  submitSearchBtn.style.display = 'none';
  searchBar.value = '';

  status.textContent = "Syst√®me r√©initialis√©. Entrez un niveau pour activer le troll.";

  trollLevel = 0;
  activatedAlerts.clear();
  customAlertContainer.style.display = 'none';

  // R√©initialiser les variables du syst√®me de red√©marrage et le set des initialTrollEffects
  errorCounter = 0;
  restartSequenceActive = false;
  initialTrollEffectsTriggered.clear(); // VIDE LE SET ICI
  canGenerateIntervalPopups = true; // R√©initialiser le flag de g√©n√©ration de popups par intervalle


  if (currentProgressTimeout) { // S'assurer qu'aucun ancien timeout n'est actif
      clearTimeout(currentProgressTimeout);
      currentProgressTimeout = null;
  }
}

function startMatrixRain() {
    if (matrixRainInterval) return;
    matrixRainContainer.style.display = 'block';
    matrixRainContainer.innerHTML = '';

    matrixRainContainer.style.position = 'relative';

    const computedStyle = getComputedStyle(matrixRainContainer);
    const fontSize = parseFloat(computedStyle.fontSize);
    const lineHeight = parseFloat(computedStyle.lineHeight) || fontSize * 1.2;

    const charWidth = fontSize * 0.6;
    const charHeight = lineHeight;

    let initialContent = '';
    const numLines = Math.max(1, Math.floor(matrixRainContainer.offsetHeight / charHeight));
    const numChars = Math.max(1, Math.floor(matrixRainContainer.offsetWidth / charWidth));

    for(let i = 0; i < numLines + 5; i++) {
        let line = '';
        for(let j = 0; j < numChars; j++) {
            line += Math.round(Math.random());
        }
        initialContent += line + '\n';
    }
    matrixRainContainer.textContent = initialContent;


    matrixRainInterval = setInterval(() => {
        let currentContent = matrixRainContainer.textContent;
        const firstLineBreak = currentContent.indexOf('\n');
        if (firstLineBreak !== -1) {
            currentContent = currentContent.substring(firstLineBreak + 1);
        } else {
            currentContent = '';
        }

        let newLine = '';
        for(let i = 0; i < numChars; i++) {
            newLine += Math.round(Math.random());
        }
        matrixRainContainer.textContent = currentContent + newLine + '\n';

    }, 100);
    console.log("Matrix Rain d√©marr√© avec numLines:", numLines, "numChars:", numChars, "fontSize:", fontSize);
}


function stopMatrixRain() {
    if (matrixRainInterval) {
        clearInterval(matrixRainInterval);
        matrixRainInterval = null;
    }
    matrixRainContainer.style.display = 'none';
    console.log("Matrix Rain arr√™t√©.");
}


function showDegoulinantText() {
  if (!degoulinantText) {
    degoulinantText = document.createElement("div");
    degoulinantText.id = "degoulinant-text";
    degoulinantText.textContent = "MAJ TERMIN√âE - VOTRE PC EST INFECT√â (CECI EST UN TROLL)";
    document.body.appendChild(degoulinantText);
    console.log("Texte d√©goulinant affich√©.");
  }
}


function playErrorSound(times) {
    if (restartSequenceActive) return; // Ne pas compter les erreurs pendant le red√©marrage

    let count = 0;
    function play() {
        if (errorSound) {
            errorSound.currentTime = 0;
            errorSound.play().catch(e => console.warn("Erreur de lecture audio:", e));
            count++;
            if (count < times) {
                setTimeout(play, 800);
            } else { // Une fois que tous les sons demand√©s ont √©t√© jou√©s
                errorCounter++; // Incr√©menter le compteur d'erreurs global
                console.log(`Erreur ${errorCounter}/${RESTART_ERROR_THRESHOLD}.`);
                if (errorCounter >= RESTART_ERROR_THRESHOLD) {
                    triggerRestartSequence(); // D√©clencher la s√©quence de red√©marrage
                }
            }
        } else {
            console.warn("Element audio 'error-sound' non trouv√©.");
        }
    }
    play();
    console.log(`Son d'erreur demand√© ${times} fois.`);
}


function showFakePopups(count) {
    if (restartSequenceActive) return; // Ne pas afficher de popups pendant le red√©marrage

    for (let i = 0; i < count; i++) {
        // Retarder l'apparition de chaque popup de 0.2s
        setTimeout(() => {
            const popup = document.createElement("div");
            popup.classList.add("fake-popup");

            const randomMessage = trollMessages[Math.floor(Math.random() * trollMessages.length)];
            popup.textContent = randomMessage;

            const closeBtn = document.createElement("span");
            closeBtn.classList.add("close-button");
            closeBtn.textContent = "√ó";
            closeBtn.onclick = () => {
                popup.remove();
                console.log("Popup ferm√©e manuellement.");
            };
            popup.appendChild(closeBtn);

            // Positionnement al√©atoire pour √©viter un empilement trop parfait
            const randomX = Math.random() * (popupContainer.offsetWidth - 200); // 200px est une largeur min estim√©e pour la popup
            popup.style.left = `${randomX > 0 ? randomX : 0}px`;
            popup.style.top = `${Math.random() * 50}px`; // L√©g√®rement al√©atoire en hauteur

            // Appliquer la nouvelle animation et la g√©rer
            popup.style.animation = 'popupFloatAndFade 1s forwards'; // Animation de 1 seconde

            popupContainer.appendChild(popup);
            popupCount++;
            console.log(`Popup n¬∞${popupCount} affich√©e.`);

            // Jouer le son d'erreur √† l'apparition de chaque popup
            playErrorSound(1);

            // Supprimer la popup apr√®s 1 seconde
            setTimeout(() => {
                if (popup.parentNode) { // V√©rifier si la popup existe toujours (pas ferm√©e manuellement)
                    popup.remove();
                }
            }, 1000); // La popup est supprim√©e apr√®s 1 seconde
        }, i * 200); // D√©lai de 200ms entre chaque popup d'un m√™me lot
    }
    console.log(`${count} fausses popups demand√©es.`);
}


function triggerRestartSequence() {
    if (restartSequenceActive) return; // Emp√™che les activations multiples
    restartSequenceActive = true;
    errorCounter = 0; // R√©initialise le compteur d'erreurs pour la prochaine fois
    console.log("S√©quence de red√©marrage d√©clench√©e !");

    // Arr√™ter la progression normale si elle est en cours
    if (currentProgressTimeout) {
        clearTimeout(currentProgressTimeout);
        currentProgressTimeout = null;
    }

    // Cacher les √©l√©ments UI principaux du troll en cours
    mainTitle.style.display = 'none';
    progressBarElement.style.display = 'none';
    searchBarWrapper.style.display = 'none';
    popupContainer.style.display = 'none'; // Cacher les popups existantes
    morpionContainer.style.display = 'none'; // Cacher le morpion
    calculatorContainer.style.display = 'none'; // Cacher la calculatrice
    rickrollVideo.style.display = 'none'; // Cacher les vid√©os
    subwaySurferVideo.style.display = 'none';
    imageTroll.style.display = 'none';
    if (degoulinantText) degoulinantText.style.display = 'none';
    stopMatrixRain();

    // Emp√™cher le popupInterval de red√©marrer imm√©diatement et le stopper s'il est actif
    canGenerateIntervalPopups = false;
    if (popupInterval) {
        clearInterval(popupInterval);
        popupInterval = null;
        console.log("Popup interval cleared during restart.");
    }


    status.textContent = "La mise √† jour a √©chou√© ; red√©marrage en cours...";
    status.style.fontSize = '3vw'; // S'assurer que le texte est bien visible
    status.style.display = 'block'; // S'assurer que le status est visible

    setTimeout(() => {
        status.textContent = "red√©marrage de l'ordina4te2tur ¬°"; // Le texte avec la typo
        
        if (windowsRestartSpinnerElement) {
            windowsRestartSpinnerElement.style.display = 'block';
            startRestartSpinnerSpeedLoop(); // D√©marrer l'animation de vitesse du spinner
        }

        // Simuler la dur√©e du red√©marrage (par exemple, 15 secondes pour le spinner et les messages)
        setTimeout(() => {
            console.log("S√©quence de red√©marrage termin√©e. Reprise de la progression.");
            if (windowsRestartSpinnerElement) windowsRestartSpinnerElement.style.display = 'none';
            stopRestartSpinnerSpeedLoop(); // Arr√™ter l'ajustement de la vitesse du spinner

            // R√©initialiser la progression et relancer la barre principale
            progress = 0;
            status.textContent = `Red√©marrage termin√©. Reprise de la mise √† jour... 0%`; // Message initial de reprise
            mainTitle.style.display = 'block';
            progressBarElement.style.display = 'block';
            progressBar.style.width = '0%';

            restartSequenceActive = false; // Permettre de red√©clencher le red√©marrage
            updateProgress(); // Relancer la barre de progression

            // R√©activer les effets de troll imm√©diatement, mais sans les popups par intervalle pour l'instant
            if (trollLevel > 0) {
                 activateTrollEffects(trollLevel);
            } else {
                searchBarWrapper.style.display = 'flex';
                searchBar.disabled = false;
                submitSearchBtn.style.display = 'inline-block';
                status.textContent = "Syst√®me op√©rationnel. Entrez un niveau pour activer le troll.";
            }

            // Planifier la r√©activation de la g√©n√©ration de popups par intervalle apr√®s un d√©lai de gr√¢ce
            setTimeout(() => {
                canGenerateIntervalPopups = true;
                console.log("canGenerateIntervalPopups set to true.");
                // Si le niveau 7 est toujours actif ET que l'intervalle n'est pas encore red√©marr√©, le relancer
                if (trollLevel === 7 && !popupInterval) {
                    popupInterval = setInterval(() => showFakePopups(Math.floor(Math.random() * 3) + 1), 5000);
                    console.log("Popup interval re-established after restart grace period.");
                }
            }, 5000); // D√©lai de gr√¢ce de 5 secondes apr√®s la fin du red√©marrage

        }, 15000); // Le spinner sera visible et changera de vitesse pendant 15 secondes
    }, 3000); // Le deuxi√®me message appara√Æt 3 secondes apr√®s le premier
}

function startRestartSpinnerSpeedLoop() {
    if (!spinningCircleElement) return;
    let currentSpeed = 2000; // 2s (2000ms) pour une rotation compl√®te (vitesse initiale)
    let direction = 1; // 1 pour acc√©l√©rer, -1 pour ralentir
    const minSpeed = 300; // 0.3s (tr√®s rapide)
    const maxSpeed = 3000; // 3s (tr√®s lent)
    const step = 200; // Augmentation/diminution de la vitesse

    spinnerSpeedInterval = setInterval(() => {
        currentSpeed += direction * step;

        if (currentSpeed <= minSpeed) {
            currentSpeed = minSpeed;
            direction = 1; // Commence √† acc√©l√©rer √† nouveau
        } else if (currentSpeed >= maxSpeed) {
            currentSpeed = maxSpeed;
            direction = -1; // Commence √† ralentir
        }
        spinningCircleElement.style.animationDuration = `${currentSpeed / 1000}s`;
    }, 500); // V√©rifier et ajuster la vitesse toutes les 500ms
    console.log("Boucle de vitesse du spinner d√©marr√©e.");
}

function stopRestartSpinnerSpeedLoop() {
    if (spinnerSpeedInterval) {
        clearInterval(spinnerSpeedInterval);
        spinnerSpeedInterval = null;
        if (spinningCircleElement) {
            spinningCircleElement.style.animationDuration = '2s'; // R√©initialiser √† la vitesse par d√©faut
        }
    }
    console.log("Boucle de vitesse du spinner arr√™t√©e.");
}



function initMorpion() {
  morpionCells = Array(9).fill("");

  let currentBoardElement = morpionContainer.querySelector('#board');
  if (!currentBoardElement) {
      morpionContainer.innerHTML = "<h3>Jouez pendant que √ßa installe...</h3>";
      currentBoardElement = document.createElement("div");
      currentBoardElement.id = "board";
      morpionContainer.appendChild(currentBoardElement);
  } else {
      currentBoardElement.innerHTML = '';
  }


  morpionContainer.querySelector('h3').textContent = "Jouez pendant que √ßa installe...";

  for (let i = 0; i < 9; i++) {
    const cell = document.createElement("div");
    cell.dataset.index = i;
    cell.addEventListener("click", () => {
      if (!cell.classList.contains("used") && morpionCells[i] === "") {
        cell.textContent = "X";
        cell.classList.add("used");
        morpionCells[i] = "X";

        if (checkWinner(morpionCells) === null) {
          setTimeout(() => {
            const move = getBestMove(morpionCells);
            if (move !== null) {
              const computerCell = currentBoardElement.children[move];
              if (computerCell) {
                computerCell.textContent = "O";
                computerCell.classList.add("used");
                morpionCells[move] = "O";
              }
            }
            const winner = checkWinner(morpionCells);
            if (winner !== null) { /* Handle winner */ }
          }, 500);
        }
      }
    });
    currentBoardElement.appendChild(cell);
  }
  console.log("Morpion initialis√©.");
}

function getBestMove(board) {
  if (isGameOver(board)) return null;

  let bestScore = -Infinity;
  let move = null;
  for (let i = 0; i < board.length; i++) {
    if (board[i] === "") {
      board[i] = "O";
      const score = minimax(board, false);
      board[i] = "";
      if (score > bestScore) {
        bestScore = score;
        move = i;
      }
    }
  }
  return move;
}

function minimax(board, isMaximizing) {
  const winner = checkWinner(board);
  if (winner !== null) {
    if (winner === "O") return 10;
    else if (winner === "X") return -10;
    else return 0;
  }

  if (isMaximizing) {
    let bestScore = -Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === "") {
        board[i] = "O";
        bestScore = Math.max(bestScore, minimax(board, false));
        board[i] = "";
      }
    }
    return bestScore;
  } else {
    let bestScore = Infinity;
    for (let i = 0; i < board.length; i++) {
      if (board[i] === "") {
        board[i] = "X";
        bestScore = Math.min(bestScore, minimax(board, true));
        board[i] = "";
      }
    }
    return bestScore;
  }
}

function checkWinner(board) {
  const wins = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6],
  ];
  for (const [a, b, c] of wins) {
    if (
      board[a] !== "" &&
      board[a] === board[b] &&
      board[a] === board[c]
    )
      return board[a];
  }
  if (board.every((cell) => cell !== "")) return "draw";
  return null;
}

function isGameOver(board) {
  return checkWinner(board) !== null;
}

function processSearchBarSubmission(value) {
    if (searchBar.disabled) {
        console.warn("Tentative de soumission avec barre de recherche d√©sactiv√©e.");
        return;
    }
    console.log(`Soumission barre de recherche: "${value}"`);

    if (value === 'reset all') {
        resetAll();
        searchBar.value = '';
        status.textContent = "Syst√®me r√©initialis√©. Entrez un niveau pour activer le troll.";
        exitFullscreenMode();
        return;
    }

    if (trollLevel >= 15 && value === 'easter egg') {
        alert('Bien jou√© ! Le troll se ferme.');
        exitFullscreenMode();
        window.close();
        return;
    }

    const niveau = parseInt(value);
    if (!isNaN(niveau) && niveau >= 1 && niveau <= 15) {
        activateTrollEffects(niveau);
        searchBar.value = '';
        return;
    }

    if (/^[a-z]+$/.test(value)) {
        if (trollLevel >= 9) {
            const jokes = [
                "Tu tapes du texte, Kevin ? S√©rieux ?",
                "Je vois ce que tu fais... ce n'est pas tr√®s malin.",
                "Arr√™te de chercher, ce n'est qu'un troll !",
                "T'as pas mieux √† faire ?"
            ];
            status.textContent = jokes[Math.floor(Math.random() * jokes.length)];
        } else {
            status.textContent = "Op√©ration non reconnue.";
        }
    } else if (value.length > 0) {
        status.textContent = "Commande inconnue.";
    }
    searchBar.value = '';
}

function handleSearchBarInputLive(e) {
    if (searchBar.disabled) {
        e.target.value = '';
        return;
    }

    const val = e.target.value.toLowerCase();

    if (trollLevel >= 10 && /[aeiouy]/.test(val)) {
        rickrollVideo.style.display = "block";
        rickrollVideo.play().catch(e => console.warn("Erreur de lecture Rickroll:", e));
    } else if (trollLevel < 10 && rickrollVideo.style.display === "block") {
        rickrollVideo.pause();
        rickrollVideo.currentTime = 0;
        rickrollVideo.style.display = "none";
    }
}

function handleSearchBarKeyDown(e) {
    if (e.key === 'Enter') {
        e.preventDefault();
        processSearchBarSubmission(searchBar.value.toLowerCase());
    }
}

function handleSubmitSearchClick() {
    processSearchBarSubmission(searchBar.value.toLowerCase());
}

let jitterInterval = null;
function enableCursorJitter() {
  if (document.fullscreenElement) {
      console.log("Tentative d'activer le jitter en plein √©cran, ignor√©.");
      return;
  }
  if (jitterInterval) return;

  jitterInterval = setInterval(() => {
    if (!document.fullscreenElement) {
        const x = Math.random() * (window.screen.width - window.outerWidth);
        const y = Math.random() * (window.screen.height - window.outerHeight);
        window.moveTo(x, y);
    } else {
        disableCursorJitter();
        console.log("Jitter (Niveau 14) d√©sactiv√© car pass√© en plein √©cran.");
    }
  }, 1000);
  console.log("Jitter (Niveau 14) activ√©.");
}

function disableCursorJitter() {
  if (jitterInterval) {
    clearInterval(jitterInterval);
    jitterInterval = null;
    console.log("Jitter (Niveau 14) d√©sactiv√©.");
  }
}

function initCalculator() {
  calcDisplay.value = "";

  if (!calculatorInitialized) {
    const buttons = [
      "7", "8", "9", "/",
      "4", "5", "6", "*",
      "1", "2", "3", "-",
      "0", ".", "=", "+"
    ];

    buttons.forEach(val => {
      const btn = document.createElement("button");
      btn.className = "calc-button";
      btn.textContent = val;
      if (val === "=") {
        btn.dataset.action = "equals";
      } else if (["+", "-", "*", "/"].includes(val)) {
        btn.dataset.action = "operator";
      } else {
        btn.dataset.action = "number";
      }
      calcButtons.appendChild(btn);
    });

    const clearBtn = document.createElement("button");
    clearBtn.className = "calc-button";
    clearBtn.textContent = "C";
    clearBtn.dataset.action = "clear";
    calcButtons.appendChild(clearBtn);

    calcButtons.querySelectorAll(".calc-button").forEach((btn) => {
      btn.onclick = () => {
        const action = btn.dataset.action;
        const buttonValue = btn.textContent;

        if (action === "clear") {
          calcDisplay.value = "";
        } else if (action === "equals") {
          try {
            calcDisplay.value = new Function('return ' + calcDisplay.value.replace(/√ó/g, '*') + ' === undefined ? "" : ' + calcDisplay.value.replace(/√ó/g, '*') )();
            if (calcDisplay.value === "Infinity" || calcDisplay.value === "-Infinity" || isNaN(calcDisplay.value)) calcDisplay.value = "Erreur";
          } catch {
            calcDisplay.value = "Erreur";
          }
        } else {
          const lastChar = calcDisplay.value.slice(-1);
          const isOperator = ["+", "-", "*", "/"].includes(buttonValue);
          const lastCharIsOperator = ["+", "-", "*", "/"].includes(lastChar);

          if (isOperator && lastCharIsOperator) {
            calcDisplay.value = calcDisplay.value.slice(0, -1) + buttonValue;
          } else if (calcDisplay.value === "Erreur") {
            calcDisplay.value = buttonValue;
          }
          else {
            calcDisplay.value += buttonValue;
          }
        }
      };
    });
    calculatorInitialized = true;
    console.log("Calculatrice initialis√©e.");
  }
}

document.querySelectorAll('.close-button').forEach(button => {
    button.addEventListener('click', (event) => {
        const targetElement = event.target.closest('.fake-popup') || document.getElementById(event.target.dataset.target);
        if (targetElement) {
            targetElement.style.display = 'none';
            console.log(`Fermeture de l'√©l√©ment: ${targetElement.id || 'popup'}`);
        }
    });
});


searchBar.addEventListener("input", handleSearchBarInputLive);
searchBar.addEventListener("keydown", handleSearchBarKeyDown);
submitSearchBtn.addEventListener("click", handleSubmitSearchClick);

document.addEventListener('DOMContentLoaded', initializeTrollStartInteraction);
